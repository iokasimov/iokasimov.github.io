[["Map",1,2,7,8],"meta::meta",["Map",3,4,5,6],"astro-version","5.13.4","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"assets\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","Ya",["Map",9,10,23,24,37,38,51,52,65,66,80,81,94,95,108,109,122,123],"behaviours",{"id":9,"data":11,"body":12,"filePath":13,"digest":14,"rendered":15,"legacyId":22},{},"Incomplete list of labels describing behaviour:\n\n[Apply](Behaviours/Apply) ⋅ [First](Behaviours/First) ⋅ [Every](Behaviours/Every)","src/content/Ya/Behaviours.md","435b2b24365aa332",{"html":16,"metadata":17},"\u003Cp>Incomplete list of labels describing behaviour:\u003C/p>\n\u003Cp>\u003Ca href=\"Behaviours/Apply\">Apply\u003C/a> ⋅ \u003Ca href=\"Behaviours/First\">First\u003C/a> ⋅ \u003Ca href=\"Behaviours/Every\">Every\u003C/a>\u003C/p>",{"headings":18,"localImagePaths":19,"remoteImagePaths":20,"frontmatter":11,"imagePaths":21},[],[],[],[],"Behaviours.md","morphisms",{"id":23,"data":25,"body":26,"filePath":27,"digest":28,"rendered":29,"legacyId":36},{},"Limited set of reserved expressions:\n\n[is](/Ya/Morphisms/is) ⋅ [it](/Ya/Morphisms/it) ⋅ [be](/Ya/Morphisms/be) ⋅ [at](/Ya/Morphisms/at) ⋅ [to](/Ya/Morphisms/to) ⋅ [as](/Ya/Morphisms/as) ⋅ [that](/Ya/Morphisms/that) ⋅ [this](/Ya/Morphisms/this) ⋅ [unwrap](/Ya/Morphisms/unwrap) ⋅ [wrap](/Ya/Morphisms/wrap) ⋅ [intro](/Ya/Morphisms/intro) ⋅ [not](/Ya/Morphisms/not) ⋅ [identity](/Ya/Morphisms/identity) ⋅ [initial](/Ya/Morphisms/initial) ⋅ [terminal](/Ya/Morphisms/terminal)\n\n[by](/Ya/Morphisms/by) ⋅ [dim](/Ya/Morphisms/dim) ⋅ [get](/Ya/Morphisms/get) ⋅ [auto](/Ya/Morphisms/auto) ⋅ [put](/Ya/Morphisms/put) ⋅ [relay](/Ya/Morphisms/relay) ⋅ [on](/Ya/Morphisms/on) ⋅ [pop](/Ya/Morphisms/pop) ⋅ [push](/Ya/Morphisms/push) ⋅ [rewrap](/Ya/Morphisms/rewrap) ⋅ [shift](/Ya/Morphisms/shift) ⋅ [sub](/Ya/Morphisms/sub) ⋅ [top](/Ya/Morphisms/top) ⋅","src/content/Ya/Morphisms.md","d9fc581b030789fb",{"html":30,"metadata":31},"\u003Cp>Limited set of reserved expressions:\u003C/p>\n\u003Cp>\u003Ca href=\"/Ya/Morphisms/is\">is\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/it\">it\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/be\">be\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/at\">at\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/to\">to\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/as\">as\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/that\">that\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/this\">this\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/unwrap\">unwrap\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/wrap\">wrap\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/intro\">intro\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/not\">not\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/identity\">identity\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/initial\">initial\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/terminal\">terminal\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"/Ya/Morphisms/by\">by\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/dim\">dim\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/get\">get\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/auto\">auto\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/put\">put\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/relay\">relay\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/on\">on\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/pop\">pop\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/push\">push\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/rewrap\">rewrap\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/shift\">shift\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/sub\">sub\u003C/a> ⋅ \u003Ca href=\"/Ya/Morphisms/top\">top\u003C/a> ⋅\u003C/p>",{"headings":32,"localImagePaths":33,"remoteImagePaths":34,"frontmatter":25,"imagePaths":35},[],[],[],[],"Morphisms.md","glossary",{"id":37,"data":39,"body":40,"filePath":41,"digest":42,"rendered":43,"legacyId":50},{},"Type theory: [Saturation](Glossary/Saturation) ⋅ [Instantiation](Glossary/Instantiation) ⋅ [Equality](Glossary/Equality) ⋅ [Subtyping](Glossary/Subtyping)\n\nCategy theory: [Category](Glossary/Category) ⋅ [Functor](Glossary/Functor) ⋅ [Natural Transformation](Glossary/Natural-Transformation) ⋅ [Yoneda](Glossary/Yoneda) ⋅ [Limit](Glossary/Limit) ⋅ [Kleisli](Glossary/Kleisli)\n\nЯ specific: [Objective](Glossary/Objective) ⋅ [Labeling](Glossary/Labeling) ⋅ [Jointing](Glossary/Jointing) ⋅ [Setoid](Glossary/Setoid)","src/content/Ya/Glossary.md","47b96d95fa1ddd14",{"html":44,"metadata":45},"\u003Cp>Type theory: \u003Ca href=\"Glossary/Saturation\">Saturation\u003C/a> ⋅ \u003Ca href=\"Glossary/Instantiation\">Instantiation\u003C/a> ⋅ \u003Ca href=\"Glossary/Equality\">Equality\u003C/a> ⋅ \u003Ca href=\"Glossary/Subtyping\">Subtyping\u003C/a>\u003C/p>\n\u003Cp>Categy theory: \u003Ca href=\"Glossary/Category\">Category\u003C/a> ⋅ \u003Ca href=\"Glossary/Functor\">Functor\u003C/a> ⋅ \u003Ca href=\"Glossary/Natural-Transformation\">Natural Transformation\u003C/a> ⋅ \u003Ca href=\"Glossary/Yoneda\">Yoneda\u003C/a> ⋅ \u003Ca href=\"Glossary/Limit\">Limit\u003C/a> ⋅ \u003Ca href=\"Glossary/Kleisli\">Kleisli\u003C/a>\u003C/p>\n\u003Cp>Я specific: \u003Ca href=\"Glossary/Objective\">Objective\u003C/a> ⋅ \u003Ca href=\"Glossary/Labeling\">Labeling\u003C/a> ⋅ \u003Ca href=\"Glossary/Jointing\">Jointing\u003C/a> ⋅ \u003Ca href=\"Glossary/Setoid\">Setoid\u003C/a>\u003C/p>",{"headings":46,"localImagePaths":47,"remoteImagePaths":48,"frontmatter":39,"imagePaths":49},[],[],[],[],"Glossary.md","overview",{"id":51,"data":53,"body":54,"filePath":55,"digest":56,"rendered":57,"legacyId":64},{},"Я (pronounced as \"ya\") provides a new programming experience to design complex control flows. It brings elements of visual programming embedded in text interface coupled with powerful type inference so you can create very compact and readable code at the same time.\n\n[Principles](Ya/Principles) ⋅ [Glossary](Ya/Glossary) ⋅ [Operators](Ya/Operators) ⋅ [Primitives](Ya/Primitives) ⋅ [Wrappers](Ya/Wrappers) ⋅ [Morphisms](Ya/Morphisms) ⋅ [Behaviours](Ya/Behaviours) ⋅ [Articles](Ya/Articles) ⋅ [Snippets](Ya/Snippets) ⋅ [Tutorials](Ya/Tutorials) ⋅ [Packages](Ya/Packages) ⋅ [Tooling](Ya/Tooling)\n\n[Source code](https://github.com/iokasimov/ya) ⋅ [YouTube screencasts](https://www.youtube.com/watch?v=3BdVd__-Kk8&list=PLzkSCNTBZnGj4KVpDHquWtf19e1ElvlbV) ⋅ [Twitter account](https://x.com/ya_language)","src/content/Ya/Overview.md","02319ec80004dfd2",{"html":58,"metadata":59},"\u003Cp>Я (pronounced as “ya”) provides a new programming experience to design complex control flows. It brings elements of visual programming embedded in text interface coupled with powerful type inference so you can create very compact and readable code at the same time.\u003C/p>\n\u003Cp>\u003Ca href=\"Ya/Principles\">Principles\u003C/a> ⋅ \u003Ca href=\"Ya/Glossary\">Glossary\u003C/a> ⋅ \u003Ca href=\"Ya/Operators\">Operators\u003C/a> ⋅ \u003Ca href=\"Ya/Primitives\">Primitives\u003C/a> ⋅ \u003Ca href=\"Ya/Wrappers\">Wrappers\u003C/a> ⋅ \u003Ca href=\"Ya/Morphisms\">Morphisms\u003C/a> ⋅ \u003Ca href=\"Ya/Behaviours\">Behaviours\u003C/a> ⋅ \u003Ca href=\"Ya/Articles\">Articles\u003C/a> ⋅ \u003Ca href=\"Ya/Snippets\">Snippets\u003C/a> ⋅ \u003Ca href=\"Ya/Tutorials\">Tutorials\u003C/a> ⋅ \u003Ca href=\"Ya/Packages\">Packages\u003C/a> ⋅ \u003Ca href=\"Ya/Tooling\">Tooling\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/iokasimov/ya\">Source code\u003C/a> ⋅ \u003Ca href=\"https://www.youtube.com/watch?v=3BdVd__-Kk8&#x26;list=PLzkSCNTBZnGj4KVpDHquWtf19e1ElvlbV\">YouTube screencasts\u003C/a> ⋅ \u003Ca href=\"https://x.com/ya_language\">Twitter account\u003C/a>\u003C/p>",{"headings":60,"localImagePaths":61,"remoteImagePaths":62,"frontmatter":53,"imagePaths":63},[],[],[],[],"Overview.md","packages",{"id":65,"data":67,"body":69,"filePath":70,"digest":71,"rendered":72,"legacyId":79},{"author":68},"Murat Kasimov","[World](/Ya/Packages/World) ⋅ [ASCII](/Ya/Packages/ASCII) ⋅ [Console](/Ya/Packages/Console) ⋅ [Literals](/Ya/Packages/Literals)","src/content/Ya/Packages.md","d9a4082e29e27145",{"html":73,"metadata":74},"\u003Cp>\u003Ca href=\"/Ya/Packages/World\">World\u003C/a> ⋅ \u003Ca href=\"/Ya/Packages/ASCII\">ASCII\u003C/a> ⋅ \u003Ca href=\"/Ya/Packages/Console\">Console\u003C/a> ⋅ \u003Ca href=\"/Ya/Packages/Literals\">Literals\u003C/a>\u003C/p>",{"headings":75,"localImagePaths":76,"remoteImagePaths":77,"frontmatter":67,"imagePaths":78},[],[],[],[],"Packages.md","operators",{"id":80,"data":82,"body":83,"filePath":84,"digest":85,"rendered":86,"legacyId":93},{},"All operators are \u003Cb>left-associative\u003C/b>.\n\nComplete list of basic operators:\n\n[yi](/Ya/Operators/yi) ⋅ [yo](/Ya/Operators/yo) ⋅ [yu](/Ya/Operators/yu) ⋅ [yok](/Ya/Operators/yok) ⋅ [kyo](/Ya/Operators/kyo) ⋅ [kyok](/Ya/Operators/kyok) ⋅ [kyokl](/Ya/Operators/kyokl) ⋅ [yokl](/Ya/Operators/yokl) ⋅ [ya](/Ya/Operators/ya) ⋅ [ho](/Ya/Operators/ho) ⋅ [hu](/Ya/Operators/hu) ⋅ [ha](/Ya/Operators/ha) ⋅ [hv](/Ya/Operators/hv)  ⋅ [he](/Ya/Operators/he) ⋅ [lo](/Ya/Operators/lo) ⋅ [lu](/Ya/Operators/lu) ⋅ [la](/Ya/Operators/la) ⋅ [yp](/Ya/Operators/yp) ⋅ [ys](/Ya/Operators/ys) ⋅ [yr](/Ya/Operators/yr) ⋅ [q](/Ya/Operators/q)\n\nIncomplete list of composite operators:\n\n[yo'yo](/Ya/Operators/yo'yo) ⋅ [yo'ya](/Ya/Operators/yo'ya) ⋅ [ya'yo](/Ya/Operators/ya'yo) ⋅ [ya'ya](/Ya/Operators/ya'ya) ⋅ [hv'he](/Ya/Operators/hv'he) ⋅ [lo'yp](/Ya/Operators/lo'yp) ⋅ [lo'ys](/Ya/Operators/lo'ys) ⋅ [lu'yp](/Ya/Operators/lu'yp) ⋅ [lu'ys](/Ya/Operators/lu'ys)","src/content/Ya/Operators.md","243f73e4f7aae7d1",{"html":87,"metadata":88},"\u003Cp>All operators are \u003Cb>left-associative\u003C/b>.\u003C/p>\n\u003Cp>Complete list of basic operators:\u003C/p>\n\u003Cp>\u003Ca href=\"/Ya/Operators/yi\">yi\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/yo\">yo\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/yu\">yu\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/yok\">yok\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/kyo\">kyo\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/kyok\">kyok\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/kyokl\">kyokl\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/yokl\">yokl\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/ya\">ya\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/ho\">ho\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/hu\">hu\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/ha\">ha\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/hv\">hv\u003C/a>  ⋅ \u003Ca href=\"/Ya/Operators/he\">he\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/lo\">lo\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/lu\">lu\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/la\">la\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/yp\">yp\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/ys\">ys\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/yr\">yr\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/q\">q\u003C/a>\u003C/p>\n\u003Cp>Incomplete list of composite operators:\u003C/p>\n\u003Cp>\u003Ca href=\"/Ya/Operators/yo&#x27;yo\">yo’yo\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/yo&#x27;ya\">yo’ya\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/ya&#x27;yo\">ya’yo\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/ya&#x27;ya\">ya’ya\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/hv&#x27;he\">hv’he\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/lo&#x27;yp\">lo’yp\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/lo&#x27;ys\">lo’ys\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/lu&#x27;yp\">lu’yp\u003C/a> ⋅ \u003Ca href=\"/Ya/Operators/lu&#x27;ys\">lu’ys\u003C/a>\u003C/p>",{"headings":89,"localImagePaths":90,"remoteImagePaths":91,"frontmatter":82,"imagePaths":92},[],[],[],[],"Operators.md","principles",{"id":94,"data":96,"body":97,"filePath":98,"digest":99,"rendered":100,"legacyId":107},{},"**Composability**: A tremendous amount of time engineers spend on gluing things together. Once you can consider all controlflow patterns as [natural transformations](/Ya/Glossary/Natural-Transformation) designing and refactoring programs become straightforward.\n\n**Openness**: In contrast of encapsulation, **Я** encourages you to use open interfaces. In my opinion one of the main source of complexity is actually the habit to hide things from users. Instead we shoud see how objects are related to each other in order to come with an idea redefining things in a more suitable way.\n\n**Compactness**: Complexity exists in every system, you can either distribute it by smaller chunks or concentrate at one place. Я would prefer the latter.\n\nIt’s all sounds cool, but it’s sometimes better to state not what we **do** but rather what we **don’t**:\n\n**No explicit recursion!** We have all tools to stop writing code that requires running interpreter in our head manually, especially on jumping between goto operators. All recursive behaviour is wired in within individual natural transformation so you may forget about it.\n\n**No type declarations!** It’s okay to use it during development just to align your reasoning with type system, but most of the time it’s either obvious or takes too much attention. You can give hints both to compiler and your potential code reader using visible type application.\n\n**No custom datatypes!** In order to provide extreme composability we should abandon a habit to create new datatypes (with data keyword) in our programs. Use core primitives instead.","src/content/Ya/Principles.md","2908b25bfc861fd4",{"html":101,"metadata":102},"\u003Cp>\u003Cstrong>Composability\u003C/strong>: A tremendous amount of time engineers spend on gluing things together. Once you can consider all controlflow patterns as \u003Ca href=\"/Ya/Glossary/Natural-Transformation\">natural transformations\u003C/a> designing and refactoring programs become straightforward.\u003C/p>\n\u003Cp>\u003Cstrong>Openness\u003C/strong>: In contrast of encapsulation, \u003Cstrong>Я\u003C/strong> encourages you to use open interfaces. In my opinion one of the main source of complexity is actually the habit to hide things from users. Instead we shoud see how objects are related to each other in order to come with an idea redefining things in a more suitable way.\u003C/p>\n\u003Cp>\u003Cstrong>Compactness\u003C/strong>: Complexity exists in every system, you can either distribute it by smaller chunks or concentrate at one place. Я would prefer the latter.\u003C/p>\n\u003Cp>It’s all sounds cool, but it’s sometimes better to state not what we \u003Cstrong>do\u003C/strong> but rather what we \u003Cstrong>don’t\u003C/strong>:\u003C/p>\n\u003Cp>\u003Cstrong>No explicit recursion!\u003C/strong> We have all tools to stop writing code that requires running interpreter in our head manually, especially on jumping between goto operators. All recursive behaviour is wired in within individual natural transformation so you may forget about it.\u003C/p>\n\u003Cp>\u003Cstrong>No type declarations!\u003C/strong> It’s okay to use it during development just to align your reasoning with type system, but most of the time it’s either obvious or takes too much attention. You can give hints both to compiler and your potential code reader using visible type application.\u003C/p>\n\u003Cp>\u003Cstrong>No custom datatypes!\u003C/strong> In order to provide extreme composability we should abandon a habit to create new datatypes (with data keyword) in our programs. Use core primitives instead.\u003C/p>",{"headings":103,"localImagePaths":104,"remoteImagePaths":105,"frontmatter":96,"imagePaths":106},[],[],[],[],"Principles.md","primitives",{"id":108,"data":110,"body":111,"filePath":112,"digest":113,"rendered":114,"legacyId":121},{},"[Arrow](/Ya/Primitives/Arrow) ⋅ [Product](/Ya/Primitives/Product) ⋅ [Sum](/Ya/Primitives/Sum) ⋅ [Unit](/Ya/Primitives/Unit) ⋅ [Void](/Ya/Primitives/Void) ⋅ [Alone](/Ya/Primitives/Alone) ⋅ [Final](/Ya/Primitives/Final) ⋅ [Rather](/Ya/Primitives/Rather) ⋅ [Given](/Ya/Primitives/Given) ⋅ [Twice](/Ya/Primitives/Twice)  ⋅ [Opted](/Ya/Primitives/Opted) ⋅ [Boolean](/Ya/Primitives/Boolean) ⋅ [Maybe](/Ya/Primitives/Maybe) ⋅ [Stops](/Ya/Primitives/Stops) ⋅ [Along](/Ya/Primitives/Along) ⋅ [Event](/Ya/Primitives/Event) ⋅ [State](/Ya/Primitives/State) ⋅ [Scope](/Ya/Primitives/Scope) ⋅ [World](/Ya/Primitives/World) ⋅ [List](/Ya/Primitives/List) ⋅ [Nonempty List](/Ya/Primitives/Nonempty-List) ⋅ [Scrolling List](/Ya/Primitives/Scrolling-List) ⋅ [Shafted List](/Ya/Primitives/Shafted-List) ⋅ [Sliding List](/Ya/Primitives/Sliding-List) ⋅ [Tree](/Ya/Primitives/Tree) ⋅ [Binary Tree](/Ya/Primitives/Binary-Tree) ⋅ [Scrolling Tree](/Ya/Primitives/Scrolling-Tree) ⋅ [Joint](/Ya/Primitives/Joint)⋅ [Label](/Ya/Primitives/Label) ⋅ [Recursive](/Ya/Primitives/Recursive)\n\n[T](/Ya/Primitives/T)⋅ [T'I](/Ya/Primitives/T'I) ⋅ [I'T](/Ya/Primitives/I'T) ⋅ [T'I'I](/Ya/Primitives/T'I'I) ⋅ [T'I'II](/Ya/Primitives/T'I'II) ⋅ [T'II'I](/Ya/Primitives/T'II'I) ⋅ [T'TT'I](/Ya/Primitives/T'TT'I) ⋅ [TT'T'I](/Ya/Primitives/TT'T'I) ⋅ [AR](/Ya/Primitives/AR) ⋅ [RA](/Ya/Primitives/RA) ⋅ [AT](/Ya/Primitives/AT) ⋅ [TA](/Ya/Primitives/TA)  ⋅ [C'AT](/Ya/Primitives/C'AT) ⋅ [C'AR](/Ya/Primitives/C'AR) ⋅ [P](/Ya/Primitives/P) ⋅ [S](/Ya/Primitives/S) ⋅ [R](/Ya/Primitives/R)","src/content/Ya/Primitives.md","1ef513db44150e0a",{"html":115,"metadata":116},"\u003Cp>\u003Ca href=\"/Ya/Primitives/Arrow\">Arrow\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Product\">Product\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Sum\">Sum\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Unit\">Unit\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Void\">Void\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Alone\">Alone\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Final\">Final\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Rather\">Rather\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Given\">Given\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Twice\">Twice\u003C/a>  ⋅ \u003Ca href=\"/Ya/Primitives/Opted\">Opted\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Boolean\">Boolean\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Maybe\">Maybe\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Stops\">Stops\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Along\">Along\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Event\">Event\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/State\">State\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Scope\">Scope\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/World\">World\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/List\">List\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Nonempty-List\">Nonempty List\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Scrolling-List\">Scrolling List\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Shafted-List\">Shafted List\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Sliding-List\">Sliding List\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Tree\">Tree\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Binary-Tree\">Binary Tree\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Scrolling-Tree\">Scrolling Tree\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Joint\">Joint\u003C/a>⋅ \u003Ca href=\"/Ya/Primitives/Label\">Label\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/Recursive\">Recursive\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"/Ya/Primitives/T\">T\u003C/a>⋅ \u003Ca href=\"/Ya/Primitives/T&#x27;I\">T’I\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/I&#x27;T\">I’T\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/T&#x27;I&#x27;I\">T’I’I\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/T&#x27;I&#x27;II\">T’I’II\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/T&#x27;II&#x27;I\">T’II’I\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/T&#x27;TT&#x27;I\">T’TT’I\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/TT&#x27;T&#x27;I\">TT’T’I\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/AR\">AR\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/RA\">RA\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/AT\">AT\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/TA\">TA\u003C/a>  ⋅ \u003Ca href=\"/Ya/Primitives/C&#x27;AT\">C’AT\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/C&#x27;AR\">C’AR\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/P\">P\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/S\">S\u003C/a> ⋅ \u003Ca href=\"/Ya/Primitives/R\">R\u003C/a>\u003C/p>",{"headings":117,"localImagePaths":118,"remoteImagePaths":119,"frontmatter":110,"imagePaths":120},[],[],[],[],"Primitives.md","wrappers",{"id":122,"data":124,"body":125,"filePath":126,"digest":127,"rendered":128,"legacyId":135},{},"[Unit](Wrappers/Unit) ⋅ [This](Wrappers/This) ⋅ [That](Wrappers/That) ⋅ [These](Wrappers/These) ⋅ [True](Wrappers/True) ⋅ [False](Wrappers/False) ⋅ [Alone](Wrappers/Alone) ⋅ [Exist](Wrappers/Exist) ⋅ [Empty](Wrappers/Empty) ⋅ [Maybe](Wrappers/Maybe) ⋅ [Error](Wrappers/Error) ⋅ [Valid](Wrappers/Valid) ⋅ [Stops](Wrappers/Stops) ⋅ [Given](Wrappers/Given) ⋅ [Event](Wrappers/Event) ⋅ [State](Wrappers/State)","src/content/Ya/Wrappers.md","2444de144e0a67a6",{"html":129,"metadata":130},"\u003Cp>\u003Ca href=\"Wrappers/Unit\">Unit\u003C/a> ⋅ \u003Ca href=\"Wrappers/This\">This\u003C/a> ⋅ \u003Ca href=\"Wrappers/That\">That\u003C/a> ⋅ \u003Ca href=\"Wrappers/These\">These\u003C/a> ⋅ \u003Ca href=\"Wrappers/True\">True\u003C/a> ⋅ \u003Ca href=\"Wrappers/False\">False\u003C/a> ⋅ \u003Ca href=\"Wrappers/Alone\">Alone\u003C/a> ⋅ \u003Ca href=\"Wrappers/Exist\">Exist\u003C/a> ⋅ \u003Ca href=\"Wrappers/Empty\">Empty\u003C/a> ⋅ \u003Ca href=\"Wrappers/Maybe\">Maybe\u003C/a> ⋅ \u003Ca href=\"Wrappers/Error\">Error\u003C/a> ⋅ \u003Ca href=\"Wrappers/Valid\">Valid\u003C/a> ⋅ \u003Ca href=\"Wrappers/Stops\">Stops\u003C/a> ⋅ \u003Ca href=\"Wrappers/Given\">Given\u003C/a> ⋅ \u003Ca href=\"Wrappers/Event\">Event\u003C/a> ⋅ \u003Ca href=\"Wrappers/State\">State\u003C/a>\u003C/p>",{"headings":131,"localImagePaths":132,"remoteImagePaths":133,"frontmatter":124,"imagePaths":134},[],[],[],[],"Wrappers.md"]